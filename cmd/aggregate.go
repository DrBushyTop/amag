/*
Copyright Â© 2024 NAME HERE <EMAIL ADDRESS>
*/
package cmd

import (
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/monitor/azquery"
	"github.com/DrBushytop/AzureMetricAggregator/pkg/kql"
	"golang.org/x/net/context"
	"time"

	"github.com/spf13/cobra"
)

// aggregateCmd represents the aggregate command
var aggregateCmd = &cobra.Command{
	Use:   "aggregate",
	Short: "aggregate metrics from kql files",
	Long: `Runs a given KQL query and saves the MetricValue property generated by the result into given custom metric name. For example:

amag aggregate -f query.kql -m metricName -w workspaceId`,
	RunE: func(cmd *cobra.Command, args []string) error {
		metricName, _ := cmd.Flags().GetString("metric")
		fileName, _ := cmd.Flags().GetString("file")
		workspaceId, _ := cmd.Flags().GetString("workspaceid")

		cmd.SilenceUsage = true // Avoid printing usage on error generated by functions later
		fmt.Println("aggregate called", fileName, metricName, workspaceId)

		query, err := kql.ParseQuery(fileName)
		if err != nil {
			return fmt.Errorf("aggregate: failed to parse query: %w", err)
		}

		fmt.Println("query", query)

		wsClient, err := kql.NewWorkspaceClient(workspaceId)
		if err != nil {
			return fmt.Errorf("aggregate: failed to create workspace client: %w", err)
		}

		res, err := wsClient.QueryWorkspaceForAggregateValue(
			context.Background(),
			azquery.Body{
				Query:    to.Ptr(query),
				Timespan: to.Ptr(azquery.NewTimeInterval(time.Now().Add(time.Duration(-24)*time.Hour), time.Now())),
			},
			nil,
		)
		if err != nil {
			return fmt.Errorf("aggregate: failed to query workspace: %w", err)
		}

		fmt.Println(res)

		return nil
	},
}

func init() {
	rootCmd.AddCommand(aggregateCmd)

	// Here you will define your flags and configuration settings.

	// Cobra supports Persistent Flags which will work for this command
	// and all subcommands, e.g.:
	// aggregateCmd.PersistentFlags().String("foo", "", "A help for foo")

	// Cobra supports local flags which will only run when this command
	// is called directly, e.g.:
	//aggregateCmd.Flags().BoolP("toggle", "t", false, "Help message for toggle")
	aggregateCmd.Flags().StringP("file", "f", "", "Relative path to a KQL file to run")
	_ = aggregateCmd.MarkFlagRequired("file")
	aggregateCmd.Flags().StringP("metric", "m", "", "Name of the custom metric to save the result into")
	_ = aggregateCmd.MarkFlagRequired("metric")
	aggregateCmd.Flags().StringP("workspaceid", "w", "", "Workspace id (not the resource id) of the Log Analytics workspace to run the query against")
	_ = aggregateCmd.MarkFlagRequired("workspaceid")
}